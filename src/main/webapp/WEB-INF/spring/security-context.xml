<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" />
		<property name="url" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:XE" />
		<property name="username" value="book_ex" />
		<property name="password" value="1234" />
	</bean>
	<!-- CustomAccessDeniedHandler 빈 설정 -->
	<bean id="customAccessDenied" class="org.zerock.security.CustomAccessDeniedHandler"></bean>
	<!-- 커스텀 로그인 성공 핸들러 빈 설정 -->
	<bean id="customLoginSuccess" class="org.zerock.security.CustomLoginSuccessHandler"></bean>
	<!-- BCryptPasswordEncoder를 사용하여 비밀번호를 안전하게 해싱하는 데 사용 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	<!-- org.zerock.security.CustomUserDetailsService 클래스를 사용하여 사용자 정의 사용자 세부 정보 서비스를 설정 -->
	<bean id="customUserDetailsService" class="org.zerock.security.CustomUserDetailsService"></bean>


	<!-- Spring Security HTTP 요청 설정 -->
	<security:http auto-config="true" use-expressions="true">
		<!-- 로그인 페이지로 이동하여 사용자가 인증에 성공하면, Spring Security는 customLoginSuccess 빈에 정의된 커스텀 로그인 성공 핸들러를 사용하여 처리한다. -->
		<security:form-login login-page="/user/login" authentication-success-handler-ref="customLoginSuccess" authentication-failure-url="/user/login?error"/>
		<!-- web.xml에 설정한 security-filter가 낚아채서 검사함 -->
		
		<!-- 모든 사용자가 접근 가능한 URL -->
      	<security:intercept-url pattern="/movie/**" access="permitAll" />

		<!-- '1'=관리자, '0'= 일반회원 -->
		
      	<!-- 관리자 권한을 가진 사용자만 접근 가능한 URL -->
      	<security:intercept-url pattern="/admin/**" access="hasAuthority('role_1')" />

		<!-- 접근 거부 핸들러 설정 <security:access-denied-handler error-page="/accessError" /> -->


		<!-- 접근 제한 인터페이스를 직접구현 페이지 설정 -->
		<security:access-denied-handler ref="customAccessDenied" />





		<!-- 사용자 정의 로그인 페이지를 사용하여 폼 기반 인증 설정 <security:form-login login-page="/customLogin" /> -->


		<!-- 폼 기반 로그인 설정 -->
		<!-- <security:form-login /> -->


		<!-- CSRF 토큰 비활성화
		<security:csrf disabled="true" />-->


		<security:logout logout-url="/user/customLogout" invalidate-session="true" delete-cookies="JSESSIONID" logout-success-url="/movie/index" />


	</security:http>



	<!-- Spring Security 인증 관리자 설정 -->
	<security:authentication-manager>

		<!-- Spring Security 인증 제공자 설정 -->
		<security:authentication-provider user-service-ref="customUserDetailsService">

			<!-- 스프링 시큐리티에서 JDBC를 사용하여 사용자 정보와 권한을 데이터베이스에서 가져오는데 사용된다. <security:jdbc-user-service data-source-ref="dataSource" users-by-username-query="select user_id AS username, user_pw AS password, 1 AS enabled 
				from Member where user_id =? " authorities-by-username-query="select user_id AS username, role As auth from Member where user_id=? " /> -->

			<!-- bcryptPasswordEncoder를 참조하여 비밀번호를 안전하게 인코딩하는 데 사용한다. -->
			<security:password-encoder ref="bcryptPasswordEncoder" />

		</security:authentication-provider>


	</security:authentication-manager>




</beans>

